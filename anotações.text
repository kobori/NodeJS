aplicação Node JS

1- Instalr o Express JS

Instalar 
  $ express --view=pug myapp
Em seguida, instale as dependências:
  $ cd myapp
  $ npm install

2- Renomear a aquivo www que fica na pasta bin para server.js e colocar no diretoria principal

3- No aquivo server.js mudar o var app = require('../app'); para var app = require('./app');

4- Intalar o nodemon que reiniciando automaticamente o aplicativo do nó quando as alterações de arquivo no diretório são detectadas.
  $ npm install --save-dev nodemon

5- No arquivo package.json mudar o "start": "nodemon ./bin/www" para "start": "nodemon ./server.js"

6- Instalar Nunjucks templet engine
Instalar
  $ npm install nunjucks express-nunjucks --save
No arquivo app.js 
  const expressNunjucks = require('express-nunjucks');

Mudar o alinha de codigo app.set('view engine', 'pug'); para app.set('view engine', 'njk');

Acrescentar a linha de codigo
  const njk = expressNunjucks(app, {
    watch: true, //se for verdade, o sistema atualizará automaticamente os modelos quando eles forem alterados no sistema de arquivos.
    noCache: true //se for verdade, o sistema evitará o uso de um cache e os modelos serão recompilados a cada vez.
});

7- Instalar o baco de dado MySQL
  $ npm install mysql

8- Instalr o Knex, é um construtor de consultas SQL
criar um arquivo db.js na pasta raiz do projeto
  var knex = require('knex');
  var db = knex({
    client: 'mysql',
    connection: {
      host : '127.0.0.1',
      user : 'root',
      password : 'your_database_password',
      database : 'musics'
    } 
  });

  module.exports = db;

9- instalar o modulo method-override 
  $ npm install method-override 

Inportar o modulo no arquuivo app.jp
  var methodOverride = require('method-override');

Configurar o modulo dentro do arquivo app.js
  app.use(methodOverride(function (req, res) {
  if (req.body && typeof req.body === 'object' && '_method' in req.body) {
    // look in urlencoded POST bodies and delete it
    var method = req.body._method
    delete req.body._method
    return method
  }
}));


10- Usando banco de dados MongoDB
 $ npm install --save MongoDB

Instalar o modulo  mongoose
  $ npm install --save mongoose

Instalar o modulo bluebird
  $ npm install --save bluebird

Importar os modulo no app.js, logo abaixo da linha de codigo var methodOverride = require('method-override');
  var mongoose = require('mongoose')
  mongoose.Promise = require('bluebird');
  mongoose.connect('mongodb://localhost/musics');

Criar uma pasta chamada models dentro diretorio da pasta raiz
Dentro da pasta models criar um arquivo exemplo.js - Este arquivo representara o modelo de dados dos exemplos 
  var mongoose = require('mongoose');
  var MusicaSchema = new mongoose.Schema({
    nome: {
      type: String,
      required: true
    },
    artista: {
      type: String,
      required: true
    },
    estrelas: {
      type: Number,
      required: true
    }, 
  });
  module.exports = mongoose.model('Musica', MusicaSchema);